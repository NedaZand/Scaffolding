@model Store.Models.Stores.StoreRoom.ChartModel
@{
    Layout = null;

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
        body {
            font-family: Monospace;
            background-color: #000000;
            margin: 0px;
            overflow: hidden;
        }

        #info {
            color: #fff;
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            z-index: 100;
            display: block;
        }
    </style>

    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/plugins/bootstrap/dist/css/bootstrap.min.css">

    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/plugins/bootstrap-extension/css/bootstrap-extension.css">

    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/css/style.css">

    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/css/colors/default.css">
</head>
<body>
    @Html.Partial("_notification")

    @*<ul class="list-group" id="manpower"></ul>*@

    <button class="btn btn-primary btn-rounded waves-effect waves-light btn-sm" onclick="Print();" type="button">چاپ نمودار </button>

    @Html.HiddenFor(Model => Model.Diameter)
    @Html.HiddenFor(Model => Model.Distance)
    @Html.HiddenFor(Model => Model.Width)
    @Html.HiddenFor(Model => Model.HeightCount)

    <div style="display:none;">
        @for (int i = 1; i <= Model.HeightCount; i++)
        {
            <input class="form-control" id='M@(i)' value="@Model.AccessLevelHeight[i-1]" type="text" name="accessLevelHeight[]">

            <input class="form-control" id='F@(i)' type="text" value="@Model.AccessLevelWidth[i-1]" name="accessLevelWidth[]">

            <select class="form-control" id='B@(i)' name="accessLevelMode[]"><option value="@Model.AccessLevelMode[i-1]"> @Model.AccessLevelMode[i - 1] </option></select>


        }
        @*@for (int i = 1; i <= Model.WidthCount; i++)
            {

                <select class="form-control" id='R@(i)' name="widths[]">
                    <option value="@Model.Widths[i-1]">@Model.Widths[i - 1]</option>

                </select>



            }*@
    </div>

    <script src="~/Content/Theme/assets/plugins/jquery/dist/jquery.min.js"></script>
    <script src="~/scripts/CommonScripts/kore.js"></script>
    <script src="~/scripts/CommonScripts/orbit.js"></script>
    <script src="~/scripts/CommonScripts/WebGL.js"></script>

    <script>
        $(document).ready(function () {
            init();
            //calculationManpower();
        });


        function Print() {


            window.print();
        }



        if (WEBGL.isWebGLAvailable() === false) {

            document.body.appendChild(WEBGL.getWebGLErrorMessage());

        }

        var camera, scene, renderer;

        //init();

        function init() {


            var halatSD = [];
            var widthMSD = [];
            var heightMSD = [];
            var widthCSD = [];
            var heightCSD = [];
            var tedadErtefaSD = [];
            var tedadTolSD = [];
            //گرفتن تعداد سطح دسترسی
            var TedadKolErtefaSD = parseInt(document.getElementById('HeightCount').value);
            for (var i = 0; i < TedadKolErtefaSD; i++) {
                //    heightMSD[i] = prompt("ارتفاع سطح دسترسی");
                heightMSD[i] = parseInt(document.getElementById("M" + (i + 1)).value);
                widthMSD[i] = parseInt(document.getElementById("F" + (i + 1)).value);
                halatSD[i] = parseInt(document.getElementById("B" + (i + 1)).value);

                var fir = document.getElementById("Diameter").value;
                var thir = document.getElementById("Distance").value;


                var sum = Number(fir) + Number(thir);


                if (Number(heightMSD[i]) > Number(sum)) {
                    $('.alert-danger b').html();
                    $('.alert-danger b').html("مقدار ارتفاع سطح دسترسی نباید از مجموع قطر و فاصله مخزن از زمین، بیشتر باشد.");
                    $('.alert-success').hide();
                    $('.alert-warning').hide();
                    $(".alert-danger").fadeToggle(350);
                    
                    return;
                }

                //heightMSD[i] = document.getElementById('HeightCount').value
                //widthMSD[i] = prompt("عرض سطح دسترسی");
                //halatSD[i] = prompt("حالت سطح دسترسی بین 1تا 4");
                widthCSD[i] = widthMSD[i] * 100;
                heightCSD[i] = heightMSD[i] * 100;
                tedadErtefaSD[i] = parseInt(heightCSD[i] / 180);
                tedadTolSD[i] = parseInt(widthCSD[i] / 240);


            }
            var Tol = 30;
            var Ertefa = 20;
            var fasele = (1.2 * 38);
            //گرفتن محیط مخزن

            var Mohittt = parseInt(document.getElementById('Diameter').value);
            var widthM = ((Mohittt / 3.14) + 0.3 + 1.2) * 3.14;
            var widthM1 = ((12 / 3.14) + 0.3 + 1.2) * 3.14;

            //گرفتن ارتفاع مخزن
            var heightM = parseInt(document.getElementById('Distance').value);
            var D = widthM / 3.14;
            var D1 = widthM1 / 3.14;
            var radian = Math.atan(2.4 / D);
            var radian1 = Math.atan(2.4 / D1);
            var teta = radian * (180 / Math.PI);
            var teta1 = radian1 * (180 / Math.PI);

            var N = Math.ceil(180 / teta);
            var N1 = Math.ceil(180 / teta1);
            var newteta = 180 / N;
            var newteta1 = 180 / N1;
            var x = Math.tan((newteta * (Math.PI / 180)));
            var x1 = Math.tan((newteta1 * (Math.PI / 180)));

            var length = D * x;
            var length1 = D1 * x1;

            var arzD = length;
            var arzD1 = length1;
            var ertefaD = (1.8 * 38);

            var heightC = heightM * 100;
            var tedadErtefa = parseInt(heightC / 180);
            var tedadArs = N;
            var tedadArs1 = N1;
            var angle = 0
            var angle1 = 0
            var t1 = 0
            var t = 0
            var mohitDayere = 0
            var mohitDayereDovom = 0
            var mohitDayereDakhel = 0
            angle = 2 * Math.PI / tedadArs;
            angle1 = 2 * Math.PI / tedadArs1;
            t = ((widthM / Math.PI) * 38);
            t1 = ((widthM1 / Math.PI) * 19);
            mohitDayere = t + (widthM / Math.PI);
            mohitDayereDovom = t + (widthM / Math.PI) - fasele;
            mohitDayereDakhel = t1 + (widthM1 / Math.PI);
            var t11 = ((1.2 * 38));
            var mohitDayereDovom1 = t + (widthM / Math.PI) + t11;

            ////////////
            var distance = 7;
            var r = (D) / 2;
            var rN = (D) / 2;
            var tedaErtefaKore = parseInt(((distance * 100) + (r * 100)) / 180);

            var y = (-r * (Math.cos(Math.asin((1.8) / r))) + r);
            var yN = (-rN * (Math.cos(Math.asin((1.8) / rN))) + rN);

            var decimalPart = Math.floor(r);
            // var decimalPart = r - Math.floor(r);
            var onlyTwoDecimalPlaces = r.toFixed(2);

            var ertafaToraftegi = parseInt((distance + parseFloat(onlyTwoDecimalPlaces)) * 100);
            var tedadToraftegi2 = parseInt(ertafaToraftegi / 180)
            var tedadToraftegi1 = tedadToraftegi2 * 180;
            var tedadToraftegi = ertafaToraftegi - tedadToraftegi1;
            ///////////


            scene = new THREE.Scene();
            //				scene.background = new THREE.Color( 0x999999 );
            //
            //				var light = new THREE.DirectionalLight( 0xffffff );
            //				light.position.set( 0.5, 1.0, 0.5 ).normalize();
            //
            //				scene.add( light );

            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 1000000);

            camera.position.y = 300;
            camera.position.z = 300;

            scene.add(camera);



            //gard
            var grid = new THREE.GridHelper(0xff9900, ertefaD, TedadKolErtefaSD, halatSD, tedadArs, angle, mohitDayere, tedadErtefaSD, mohitDayereDovom, tedadTolSD, fasele);
            scene.add(grid);


            // //dayere aval
            var gridD2 = new THREE.GridHelperD2(0x000000, ertefaD, tedadErtefa, tedadArs, angle, mohitDayere);
            scene.add(gridD2);
            //
            //SD takhte jadid
            var grid1 = new THREE.GridHelper1(0xff9900, ertefaD, TedadKolErtefaSD, halatSD, tedadTolSD, tedadArs, angle, mohitDayere, tedadErtefaSD, mohitDayereDovom);
            scene.add(grid1);
            //
            //dayere  Dovom
            var grid1D2 = new THREE.GridHelper1D2(0x000000, ertefaD, tedadErtefa, tedadArs, angle, mohitDayereDovom);
            scene.add(grid1D2);
            //
            //        //Dayere dakheli
            var grid2 = new THREE.GridHelper2(0xffffff, ertefaD, tedadErtefa, angle, mohitDayereDovom1);
            scene.add(grid2);
            //
            //etesal
            var grid2D2 = new THREE.GridHelper2D2(0x000000, ertefaD, tedadErtefa, tedadArs, mohitDayereDovom, mohitDayere, angle);
            scene.add(grid2D2);
            //
            //        //kore
            var grid3 = new THREE.GridHelper3(0xffffff, mohitDayereDovom, ertefaD, tedadErtefa, tedadArs, tedaErtefaKore, angle, rN, r, y, yN);
            scene.add(grid3);
            //
            //        //paye divar aval1
            var grid31 = new THREE.GridHelper31(0xffffff, mohitDayereDovom, ertefaD, tedadErtefa, tedadArs, tedaErtefaKore, angle, rN, r, y, yN);
            scene.add(grid31);
            //
            //etesal D1
            var grid3D2 = new THREE.GridHelper3D2(0xffffff, ertefaD, tedadErtefa, tedadArs, mohitDayere, angle);
            scene.add(grid3D2);
            //
            //etesal D2
            var grid31D2 = new THREE.GridHelper31D2(0xffffff, ertefaD, tedadErtefa, tedadArs, mohitDayereDovom, angle);
            scene.add(grid31D2);
            //
            //        //ezafe bala divar aval
            //        var grid4 = new THREE.GridHelper4(0xffffff);
            //        scene.add(grid4);
            //
            //ezafe bala
            var grid4D2 = new THREE.GridHelper4D2(0xffffff, ertefaD, tedadArs, angle, mohitDayereDovom, tedadErtefa, mohitDayere);
            scene.add(grid4D2);
            //

            //        var grid5 = new THREE.GridHelper5(0xffffff);
            //        scene.add(grid5);

            //        ////paye
            var grid5D2 = new THREE.GridHelper5D2(0xffffff, ertefaD, tedadArs, mohitDayereDovom, angle, mohitDayere);
            scene.add(grid5D2);
            //
            //        //brase birony divar aval
            //        var grid6 = new THREE.GridHelper6(0xffffff);
            //        scene.add(grid6);
            //
            //zir paye
            var grid6D2 = new THREE.GridHelper6D2(0xff9900, tedadArs, angle, mohitDayereDovom, mohitDayere);
            scene.add(grid6D2);
            //
            //        //brase dakheli divar aval
            //        var grid7 = new THREE.GridHelper7(0xffffff);
            //        scene.add(grid7);
            //
            //
            //brase bironi
            var grid7D2 = new THREE.GridHelper7D2(0xffffff, tedadArs, ertefaD, tedadErtefa, angle, mohitDayere);
            scene.add(grid7D2);
            //
            //
            //SD  takhte
            var grid8 = new THREE.GridHelper8(0xff9900, ertefaD, TedadKolErtefaSD, halatSD, tedadTolSD, tedadArs, angle, mohitDayere, tedadErtefaSD, fasele);
            scene.add(grid8);

            //brase dakheli
            var grid8D2 = new THREE.GridHelper8D2(0xffffff, tedadArs, ertefaD, tedadErtefa, angle, mohitDayereDovom, mohitDayere);
            scene.add(grid8D2);
            //
            //        //SD divar aval gard tol
            //        var grid9 = new THREE.GridHelper9(0xffffff);
            //        scene.add(grid9);
            //
            //d3
            var grid9D2 = new THREE.GridHelper9D2(0xffffff, ertefaD, tedadErtefa, mohitDayereDovom1, angle, mohitDayere);
            scene.add(grid9D2);
            //
            // //SD divar aval gard arz
            //        var grid10 = new THREE.GridHelper10(0xffffff);
            //        scene.add(grid10);
            //
            //peleR
            var grid10D2 = new THREE.GridHelper10D2(0xffffff, ertefaD, tedadErtefa, angle, mohitDayereDovom1);
            scene.add(grid10D2);
            //
            //        //SD divar aval takhteJadid tol
            //        var grid11 = new THREE.GridHelper11(0xff9900);
            //        scene.add(grid11);
            //
            //peleL
            var grid11D2 = new THREE.GridHelper11D2(0xffffff, ertefaD, tedadErtefa, angle, mohitDayereDovom1);
            scene.add(grid11D2);

            //        //SD divar aval takhteJadid arz
            //        var grid12 = new THREE.GridHelper12(0xff9900);
            //        scene.add(grid12);
            //
            //
            //gard
            var grid12D2 = new THREE.GridHelper12D2(0xff9900, ertefaD, tedadErtefa, angle, mohitDayere);
            scene.add(grid12D2);


            //grond


            var groundGeometry = new THREE.PlaneBufferGeometry(10000, 10000);
            var groundMaterial = new THREE.MeshStandardMaterial({ roughness: 0.8, metalness: 0.4 });
            var ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = Math.PI * - 0.5;
            scene.add(ground);

            var textureLoader = new THREE.TextureLoader();
            //        textureLoader.load( 'textures/hardwood2_diffuse.jpg'
            textureLoader.load('ax/aa.jpg'

                , function (map) {

                    map.wrapS = THREE.RepeatWrapping;
                    map.wrapT = THREE.RepeatWrapping;
                    map.anisotropy = 36;
                    map.repeat.set(1000, 1000);
                    groundMaterial.map = map;
                    groundMaterial.needsUpdate = true;

                });



            var ambientLight = new THREE.AmbientLight(0xcccccc, 0.8);
            scene.add(ambientLight);

            var directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(- 1, 1, 1);
            scene.add(directionalLight);


            //tasvire doresh
            var cubeTextureLoader = new THREE.CubeTextureLoader();
            cubeTextureLoader.setPath('ax/');

            var cubeTexture = cubeTextureLoader.load([
                'aa.jpg', 'nx.jpg',
                'py.jpg', 'ny.jpg',
                'pz.jpg', 'nz.jpg',
            ]);

            var cubeShader = THREE.ShaderLib['cube'];
            cubeShader.uniforms['tCube'].value = cubeTexture;

            var skyBoxMaterial = new THREE.ShaderMaterial({
                fragmentShader: cubeShader.fragmentShader,
                vertexShader: cubeShader.vertexShader,
                uniforms: cubeShader.uniforms,
                side: THREE.BackSide
            });

            var skyBox = new THREE.Mesh(new THREE.BoxBufferGeometry(200000000, 200000000, 200000000), skyBoxMaterial);
            scene.add(skyBox);




            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);



            var controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);
            controls.update();
            document.addEventListener('keydown', onKeyDown, false);

            window.addEventListener('resize', onWindowResize, false);

        }


        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

            render();

        }
        function onKeyDown(event) {

            event.stopPropagation();

            switch (event.keyCode) {

                case 38:
                case 87:

                case 40:
                case 83:

                case 37:
                case 65:

                case 39:
                case 68:

                //case 67: /*C*/     controls.crouch = true; break;
                //case 32: /*space*/ controls.jump = true; break;
                //case 17: /*ctrl*/  controls.attack = true; break;

            }

        }
        function render() {

            renderer.render(scene, camera);

        }


    </script>


</body>
</html>