@model Store.Models.Stores.StoreRoom.ChartModel
    @{ 
        Layout = null;
    }
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
        body {
            font-family: Monospace;
            background-color: #000000;
            margin: 0px;
            overflow: hidden;
        }

        #info {
            color: #fff;
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            z-index: 100;
            display: block;
        }
    </style>
   
    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/plugins/bootstrap/dist/css/bootstrap.min.css">
 
    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/plugins/bootstrap-extension/css/bootstrap-extension.css">
 
    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/css/style.css">

    <link rel="stylesheet" type="text/css" href="/Content/Theme/assets/css/colors/default.css">
</head>
<body>


    @*<ul class="list-group" id="manpower"></ul>*@

    <button class="btn btn-primary btn-rounded waves-effect waves-light btn-sm" onclick="Print();" type="button">چاپ نمودار </button>

    
    @Html.HiddenFor(Model => Model.Width)
    @Html.HiddenFor(Model => Model.Length)
    @Html.HiddenFor(Model => Model.Height)
   
    <script src="~/Content/Theme/assets/plugins/jquery/dist/jquery.min.js"></script>
    <script src="~/scripts/CommonScripts/ghafasi.js"></script>
    <script src="~/scripts/CommonScripts/orbit.js"></script>
    <script src="~/scripts/CommonScripts/WebGL.js"></script>

    <script>
        $(document).ready(function () {
            init();
            //calculationManpower();
        });


        function Print() {


            window.print();
        }
        
            if (WEBGL.isWebGLAvailable() === false) {

                document.body.appendChild(WEBGL.getWebGLErrorMessage());

            }

            var camera, scene, renderer;

            //init();


        function init() {

            var Tol = 30;
            var Ertefa = 20;


            // گرفتن طول داربست
            var widthM = parseInt(document.getElementById('Length').value);
            //گرفتن ارتفاع داربست از ورودی
            var heightM = parseInt(document.getElementById('Height').value);
            // گرفتن عرض داربست از ورودی 
            var ArsM = parseInt(document.getElementById('Width').value);
            var widthC = widthM * 100;
            var heightC = heightM * 100;
            var ArsC = ArsM * 100;
            var tedadErtefa = parseInt(heightC / 180);
            var tedadTol = parseInt(widthC / 240);
            var tedadArs1 = parseInt(ArsC / 120);

            var tedadArs = [];
            for (let i = 0; i < tedadArs1; i++) {
                tedadArs.push(15);


            }

            var kolFaseleHa = 0;
            for (let i = 0; i < tedadArs.length; i++) {
                kolFaseleHa = kolFaseleHa + tedadArs[i]

            }
            var TedadKolErtefaSD = 1;
            var halatSD = [];
            var widthMSD = [];
            var heightMSD = [];
            var widthCSD = [];
            var heightCSD = [];
            var tedadErtefaSD = [];
            var tedadTolSD = [];
            for (var i = 0; i < TedadKolErtefaSD; i++) {
                heightMSD[i] = heightM
                widthMSD[i] = 4
                halatSD[i] = 4
                widthCSD[i] = widthMSD[i] * 100;
                heightCSD[i] = heightMSD[i] * 100;
                tedadErtefaSD[i] = parseInt(heightCSD[i] / 180);
                tedadTolSD[i] = parseInt(widthCSD[i] / 240);

            }


            scene = new THREE.Scene();
            //				scene.background = new THREE.Color( 0x999999 );
            //
            //				var light = new THREE.DirectionalLight( 0xffffff );
            //				light.position.set( 0.5, 1.0, 0.5 ).normalize();
            //
            //				scene.add( light );

            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 1000000);

            camera.position.y = 300;
            camera.position.z = 300;

            scene.add(camera);



            //
            var grid = new THREE.GridHelper(0xffffff, tedadArs, tedadErtefa, tedadTol, Ertefa, Tol);
            scene.add(grid);



            var grid1 = new THREE.GridHelper1(0xffffff, tedadArs, tedadErtefa, tedadTol, Ertefa, Tol);
            scene.add(grid1);
            //

            var grid2 = new THREE.GridHelper2(0xffffff, tedadArs, tedadErtefa, tedadTol, Ertefa, Tol);
            scene.add(grid2);
            //

            var grid3 = new THREE.GridHelper3(0xffffff, tedadArs, tedadTol, Tol);
            scene.add(grid3);
            //
            //        //paye divar aval1
            var grid31 = new THREE.GridHelper31(0xff9900, tedadArs, tedadTol, Tol);
            scene.add(grid31);

            //        //ezafe bala divar aval
            var grid4 = new THREE.GridHelper4(0xffffff, tedadArs, tedadErtefa, tedadTol, Ertefa, Tol);
            scene.add(grid4);
            //

            var grid5 = new THREE.GridHelper5(0xffffff, tedadArs, tedadErtefa, tedadTol, Ertefa, Tol);
            scene.add(grid5);

            //        //brase birony divar aval
            var grid6 = new THREE.GridHelper6(0xffffff, tedadErtefa, tedadTol, Ertefa, Tol, kolFaseleHa);
            scene.add(grid6);
            var grid61 = new THREE.GridHelper61(0xffffff, tedadErtefa, tedadTol, Ertefa, Tol);
            scene.add(grid61);
            //

            //        //brase dakheli divar aval
            var grid7 = new THREE.GridHelper7(0xffffff, tedadErtefa, tedadTol, Ertefa, Tol, tedadArs);
            scene.add(grid7);
            //
            //
            //brase dakheli divar dovom
            // var grid7D2 = new THREE.GridHelper7D2(0xffffff);
            // scene.add(grid7D2);
            //
            //
            //        //SD divar aval takhte
            var grid8 = new THREE.GridHelper8(0xff9900, tedadTol, Ertefa, Tol, tedadArs, TedadKolErtefaSD, halatSD, tedadErtefaSD);
            scene.add(grid8);
            //SD divar aval dovom
            // var grid8D2 = new THREE.GridHelper8D2(0xff9900);
            // scene.add(grid8D2);
            //
            //        //SD divar aval gard tol
            var grid9 = new THREE.GridHelper9(0xffffff, TedadKolErtefaSD, tedadTolSD, tedadTol, Ertefa, Tol, tedadErtefaSD, kolFaseleHa, halatSD);
            scene.add(grid9);
            //
            //SD divar dovom gard tol
            // var grid9D2 = new THREE.GridHelper9D2(0xffffff);
            // scene.add(grid9D2);
            //
            // //SD divar aval gard arz
            var grid10 = new THREE.GridHelper10(0xffffff, TedadKolErtefaSD, tedadTolSD, tedadTol, Ertefa, Tol, tedadErtefaSD, kolFaseleHa, halatSD);
            scene.add(grid10);
            //
            //SD divar dovom gard arz
            // var grid10D2 = new THREE.GridHelper10D2(0xffffff);
            // scene.add(grid10D2);
            //
            //        //SD divar aval takhteJadid tol
            var grid11 = new THREE.GridHelper11(0xff9900, TedadKolErtefaSD, tedadTolSD, tedadTol, Ertefa, Tol, tedadErtefaSD, kolFaseleHa, halatSD);
            scene.add(grid11);
            //
            //SD divar dovom takhteJadid tol
            // var grid11D2 = new THREE.GridHelper11D2(0xff9900);
            // scene.add(grid11D2);
            //
            //        //SD divar aval takhteJadid arz
            var grid12 = new THREE.GridHelper12(0xff9900, TedadKolErtefaSD, tedadTolSD, tedadTol, Ertefa, Tol, tedadErtefaSD, kolFaseleHa, halatSD);
            scene.add(grid12);
            //        //SD divar aval pele
            var grid13 = new THREE.GridHelper13(0xffffff, TedadKolErtefaSD, Ertefa, Tol, tedadErtefaSD, kolFaseleHa);
            scene.add(grid13);

            //   //SD divar aval pele
            //         var grid13D2 = new THREE.GridHelper13D2(0xffffff);
            // scene.add(grid13D2);

            //
            //SD divar dovom takhteJadid arz
            // var grid12D2 = new THREE.GridHelper12D2(0xff9900);
            // scene.add(grid12D2);


            //grond


            var groundGeometry = new THREE.PlaneBufferGeometry(10000, 10000);
            var groundMaterial = new THREE.MeshStandardMaterial({ roughness: 0.8, metalness: 0.4 });
            var ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = Math.PI * - 0.5;
            scene.add(ground);

            var textureLoader = new THREE.TextureLoader();
            //        textureLoader.load( 'textures/hardwood2_diffuse.jpg'
            textureLoader.load('ax/aa.jpg'

                , function (map) {

                    map.wrapS = THREE.RepeatWrapping;
                    map.wrapT = THREE.RepeatWrapping;
                    map.anisotropy = 16;
                    map.repeat.set(300, 300);
                    groundMaterial.map = map;
                    groundMaterial.needsUpdate = true;

                });



            var ambientLight = new THREE.AmbientLight(0xcccccc, 0.8);
            scene.add(ambientLight);

            var directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(- 1, 1, 1);
            scene.add(directionalLight);


            //tasvire doresh
            var cubeTextureLoader = new THREE.CubeTextureLoader();
            cubeTextureLoader.setPath('textures/cube/skybox/');

            var cubeTexture = cubeTextureLoader.load([
                'px.jpg', 'nx.jpg',
                'py.jpg', 'ny.jpg',
                'pz.jpg', 'nz.jpg',
            ]);

            var cubeShader = THREE.ShaderLib['cube'];
            cubeShader.uniforms['tCube'].value = cubeTexture;

            var skyBoxMaterial = new THREE.ShaderMaterial({
                fragmentShader: cubeShader.fragmentShader,
                vertexShader: cubeShader.vertexShader,
                uniforms: cubeShader.uniforms,
                side: THREE.BackSide
            });

            var skyBox = new THREE.Mesh(new THREE.BoxBufferGeometry(200000000, 200000000, 200000000), skyBoxMaterial);
            scene.add(skyBox);




            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);



            var controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);
            controls.update();
            document.addEventListener('keydown', onKeyDown, false);

            window.addEventListener('resize', onWindowResize, false);

        }
       
            function onWindowResize() {

                camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

            render();

        }
            function onKeyDown(event) {

                event.stopPropagation();

            switch (event.keyCode) {

                    case 38:
            case 87:

            case 40:
            case 83:

            case 37:
            case 65:

            case 39:
            case 68:

            //case 67: /*C*/     controls.crouch = true; break;
            //case 32: /*space*/ controls.jump = true; break;
            //case 17: /*ctrl*/  controls.attack = true; break;

        }

}
            function render() {

                renderer.render(scene, camera);

            }
    </script>


</body>
</html>